package singleton;

/*
При реализации шаблона Singleton
необходимо учитывать проблему с visibility (Видимостью).
Эту проблему можно решать двумя способами
используя volatile или сразу публикуя объект через final.
Многопоточные реализации аналогичны
не многопоточным. Их можно разделить на две группы:

1. Энергичная загрузка:
1.1. Реализация с применением enum,
аналогична однопоточной реализации.
EnumObj
Объект enum создается при загрузке
класса и безопасно публикуется всем клиентам.
---

1.2. Реализация с применением поля final.
FinalObj

2. Ленивая загрузка:
!!! Использовать этот шаблон не рекомендуется.
2.1. Single checked locking.
Инициализация и проверка экземпляра
происходит внутри критической секции.
Этот шаблон деградирует производительность.

2.2. Double checked locking.
!!! Использовать этот шаблон не рекомендуется.
Поле экземпляра обозначено volatile.
Это обеспечит решение проблемы видимости
после инициализации поля.
Первая проверка экземпляра идет
до блока синхронизации, что позволяет
улучшить скорость работы по сравнению
с single checked locking реализацией.
В критической секции происходит
инициализация экземпляра и запись
его в переменную.

2.3. Holder.
Реализация этого шаблона аналогична однопоточной среде.
Его работа стабильна и не влияет на производительность системы.

-----

Вывод:
Если у вас нет необходимости в ленивой загрузке,
то используйте шаблоны из первой группы.
Например, инициализация кэша или базы данных.

Если в приложении есть затратные ресурсы
нужно использовать шаблоны с ленивой загрузкой.
Здесь можно использовать только один шаблон - это Holder.

Другие шаблоны будут отрицательно влиять
на производительность системы.

 */